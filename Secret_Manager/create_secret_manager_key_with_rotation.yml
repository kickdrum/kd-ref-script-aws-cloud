 AWSTemplateFormatVersion: 2010-09-09
 Transform: AWS::SecretsManager-2020-07-23
 Description: "This is a template to demonstrate CloudFormation resources for Secrets Manager"

 Parameters:
  ExistingVPCId:
    Description: 'Enter the VPC Id of an existing VPC'
    Type: AWS::EC2::VPC::Id
    Default: 'vpc-1234' # A dummy VPC Id as the default value
  SubnetIds: 
      Description: SubnetIds in the VPC where DB instance is placed
      Type: List<AWS::EC2::Subnet::Id>
      ConstraintDescription: must be list of EC2 security group ids
      Default: 'subnet-1234,subnet-12345' # A dummy subnet id list as the default value
  DBSecurityGroupIds: 
      Description: Security groups that can be used to access the RDS
      Type: List<AWS::EC2::SecurityGroup::Id>
      ConstraintDescription: must be list of EC2 security group ids
      Default: 'sg-1234' # A dummy security group list as the default value
  RotationLambdaSecurityGroupId:
      Description: Security groups that will be used by the rotation lambda
      Type: String
      Default: 'sg-1234' # A dummy security group list as the default value
    

 Resources:
      #VPC endpoint that will enable the rotation Lambda to make api calls to Secrets Manager 
      SecretsManagerVPCEndpoint:
        Type: AWS::EC2::VPCEndpoint
        Properties:
          SubnetIds: !Ref SubnetIds
          SecurityGroupIds: !Ref DBSecurityGroupIds
          VpcEndpointType: 'Interface'
          ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
          # PrivateDnsEnabled: true
          VpcId: !Sub '${ExistingVPCId}'

      #This is a Secret resource with a randomly generated password in its SecretString JSON.
      KDRefRDSInstanceRotationSecret:
        Type: AWS::SecretsManager::Secret
        Properties:
          Description: 'This is our rds instance secret'
          GenerateSecretString:
            SecretStringTemplate: '{"username": "admin"}'
            GenerateStringKey: 'password'
            PasswordLength: 16
            ExcludeCharacters: '"@/\'
          Tags:
            - Key: Project
              Value: kd-ref-backend
            - Key: CreatedBy
              Value: myUserName

      #This is an RDS instance resource. Its master username and password use dynamic references to resolve values from 
      #SecretsManager. The dynamic reference guarantees that CloudFormation will not log or persist the resolved value 
      #We sub the Secret resource's logical id in order to construct the dynamic reference, since the Secret's name is being #generated by CloudFormation
      KdRefDBInstance:
        Type: AWS::RDS::DBInstance
        Properties:
          AllocatedStorage: 20
          DBInstanceClass: db.t3.micro
          Engine: mysql
          DBSubnetGroupName:
            Ref: KDRefDBSubnetGroup
          MasterUsername: !Sub '{{resolve:secretsmanager:${KDRefRDSInstanceRotationSecret}::username}}'
          MasterUserPassword: !Sub '{{resolve:secretsmanager:${KDRefRDSInstanceRotationSecret}::password}}'
          BackupRetentionPeriod: 0
          VPCSecurityGroups: !Ref DBSecurityGroupIds
          PubliclyAccessible: false # toggle this if you want to create a publicily accessible dev instance for short term use

      #Database subnet group for the RDS instance 
      KDRefDBSubnetGroup: 
        Type: AWS::RDS::DBSubnetGroup
        Properties: 
          DBSubnetGroupDescription: "Test Group"
          SubnetIds: !Ref SubnetIds
    
      #This is a SecretTargetAttachment resource which updates the referenced Secret resource with properties about
      #the referenced RDS instance
      SecretRDSInstanceAttachment:
        Type: AWS::SecretsManager::SecretTargetAttachment
        Properties:
          SecretId: !Ref KDRefRDSInstanceRotationSecret
          TargetId: !Ref KdRefDBInstance
          TargetType: AWS::RDS::DBInstance
     
      #This is a RotationSchedule resource. It configures rotation of password for the referenced secret using a rotation lambda
      #The first rotation happens at resource creation time, with subsequent rotations scheduled according to the rotation rules
      #We explicitly depend on the SecretTargetAttachment resource being created to ensure that the secret contains all the
      #information necessary for rotation to succeed
      KDRefSecretRotationSchedule:
        Type: AWS::SecretsManager::RotationSchedule
        DependsOn: SecretRDSInstanceAttachment 
        Properties:
          SecretId: !Ref KDRefRDSInstanceRotationSecret
          HostedRotationLambda:
            RotationType: MySQLSingleUser
            RotationLambdaName: SecretsManagerRotation
            VpcSecurityGroupIds: !Sub '${RotationLambdaSecurityGroupId}'
            VpcSubnetIds:
              Fn::Join:
                - ","
                - !Ref SubnetIds
          RotationRules:
            AutomaticallyAfterDays: 30